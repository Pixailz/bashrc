#!/bin/bash

: ' install_module MODULE
    install_file        install file to source
    install_func        entry func of module
    post_install_func   post install func of module
'
function	install_module()
{
	local	install_file="${DIR_MODULE}/${module}/install"
	local	install_func="${PREFIX_INSTALL_MODULE}${module}"
	local	post_install_func="${PREFIX_POST_INSTALL_MODULE}${module}"

	# source each module install file
	source ${install_file}
	${install_func}
	if [ "$(type -t ${post_install_func})" == "function" ]; then
		${post_install_func}
	fi
}

: ' install function for all modules
    DO_MODULE : specific array to do
    if len DO_MODULE == 0 do all
'
function	install_modules()
{
	if [ ${#DO_MODULE[*]} == 0 ]; then
		DO_MODULE=${MODULE[*]}
	fi
	for module in ${DO_MODULE[*]}; do
		install_module
	done
}

function	main_entry()
{
	install_modules
}

# print help and quit
function	usage()
{
	printf "Usage : ${0} [-f|-n] [-p PART1... PARTN]\n"
	printf "  -f, --force       to force install\n"
	printf "  -n, --no-color    to disable colors\n"
	printf "  -h, --help        show this help\n"
	#printf "  -u, --user        install for specified user, default to current"
	#TODO
	printf "\n"
	printf "  -p, --part        install part, available part:\n"
	printf "                        - bash\n"
	printf "                        - batcat\n"
	printf "                        - gdb\n"
	printf "                        - vim\n"
	printf "                    should be at the end of command\n"
	exit
}

# source .config
source ./.config

parse_arg ${*}

# if not sourced, BASH_SOURCE keep current file when $0 keep launched file
if [ "${BASH_SOURCE[0]}" -ef "${0}" ]; then
	main_entry
fi
