#!/bin/bash

: ' install_module MODULE
    install_file        install file to source
    install_func        entry func of module
    post_install_func   post install func of module
'
function	install_module()
{
	local	install_file="${DIR_MODULE}/${module}/install"
	local	install_func="${PREFIX_INSTALL_MODULE}${module}"
	local	post_install_func="${PREFIX_POST_INSTALL_MODULE}${module}"

	# source each module install file
	source ${install_file}
	${install_func}
	if [ "$(type -t ${post_install_func})" == "function" ]; then
		${post_install_func}
	fi
}

: ' install function for all modules
    DO_MODULE : specific array to do
    if len DO_MODULE == 0 do all
'
function	install_modules()
{
	if [ ${#DO_MODULE[*]} == 0 ]; then
		DO_MODULE=(${MODULE[@]})
		for module in ${INGORED_MODULE[@]}; do
			DO_MODULE=(${DO_MODULE[@]//${module}})
		done
	fi
	for module in ${DO_MODULE[*]}; do
		install_module
	done
}

function	main_entry()
{
	install_modules
}

# print help and quit
function	usage()
{
	printf "Usage : ${0} [-f|-n] [-p PART1... PARTN]\n"
	printf "  -f, --force       to force install\n"
	printf "  -n, --no-color    to disable colors\n"
	printf "  -l, --no-log      to disable the log"
	printf "  -h, --help        show this help\n"
	#printf "  -u, --user        install for specified user, default to current"
	#TODO
	printf "\n"
	printf "  -p, --part        install part, available part:\n"
	printf "                        - bash\n"
	printf "                        - batcat\n"
	printf "                        - gdb\n"
	printf "                        - vim\n"
	printf "                    should be at the end of command\n"
	exit
}

function	git::check_update()
{
	local	current_branch
	local	current_commit_id
	local	latest_commit_id

	p_info "Check for update"
	cd "${HOME}/.local/bin/dot_files"
	current_branch=$(git rev-parse --abbrev-ref HEAD)
	current_commit_id=$(git rev-parse HEAD)
	latest_commit_id=$( \
		curl -# -H \
		"Accept: application/vnd.github.VERSION.sha" \
		https://api.github.com/repos/Pixailz/dot_files/commits/${current_branch}
	)
	if [ "${current_commit_id}" != "${latest_commit_id}" ]; then
		p_warn "Not up-to-date, updating"
		git reset --hard "origin/${current_branch}" && git pull ; true
	else
		p_pass "Already up-to-date (${lcyan}${current_commit_id::7}${reset})\n"
	fi
	cd - 1>/dev/null
}

PATH_CONFIG=$(realpath ${BASH_SOURCE[0]})
DIR_BASE=${PATH_CONFIG%/*}

# source .config
source ${DIR_BASE}/.config

git::check_update

parse_arg ${*}

# if not sourced, BASH_SOURCE keep current file when $0 keep launched file
if [ "${BASH_SOURCE[0]}" -ef "${0}" ]; then
	main_entry
fi
