## module folder
DIR_MODULE="${DIR_BASE}/modules"

## installation
INSTALL_DIR="${HOME}/.local/bin"

## enumerate modules
MODULE=(
	"bash"
	"batcat"
	"gdb"
	"git"
	"htop"
	"i3"
	"nerdfont"
	"package"
	"tmux"
	"vim"
	"vscode"
)

# prevent running package everytime ...
INGORED_MODULE=(
	"package"
	"i3"
)

# check on which os we are
if [ $(type -t termux-setup-storage) ]; then
	OS_ID="termux"
else
	if [ -f /etc/os-release ]; then
		OS_ID=$(. /etc/os-release && printf "${ID}")
		if [ -z "${OS_ID}" ]; then
			case "$(. /etc/os-release && echo "${NAME}")" in
				"BlackArch")			OS_ID=blackarch	;;
			esac
		fi
	else
		OS_ID=Unknown
	fi
fi

PREFIX_INSTALL_MODULE=(
	"pre::install"
	"install"
	"post::install"
)

### bashrc config
PATH_BASH_FILE_IN=(
	".bashrc"
	".bash_aliases"
	".bash_profile"
)
PATH_BASH_DIR_OUT="${HOME}"

### gdbinit config
PATH_GDBINIT_IN="${DIR_MODULE}/gdb/.gdbinit"
PATH_GDBINIT_OUT="${HOME}/.gdbinit"

### vimrc config
PATH_VIMRC_IN="${DIR_MODULE}/vim/.vimrc"
PATH_VIMRC_OUT="${HOME}/.vimrc"

### vscoderc config
PATH_VS_SNIPPET_IN="${DIR_MODULE}/vscode/snippets"
PATH_VS_SNIPPET_OUT="${HOME}/.config/Code/User/snippets"

### batcat config
BATCAT_DIR_BASE_IN="${DIR_MODULE}/batcat"
BATCAT_DIR_BASE_OUT="${HOME}/.config/bat"
BATCAT_CONF_FILE_IN="${BATCAT_DIR_BASE_IN}/config"
BATCAT_CONF_FILE_OUT="${BATCAT_DIR_BASE_OUT}/config"

### tmux config
PATH_TMUXRC_FILE_IN="${DIR_MODULE}/tmux/.tmux.conf"
PATH_TMUXRC_FILE_OUT="${HOME}/.tmux.conf"

### NERDFONT
NERDFONT_LINK="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/FiraCode.zip"

### PACKAGE

#### BASE
PACK_BASE=(
	"xxd"
	"vim"
	"tmux"
	"git"
	"wget"
	"curl"
	"tree"
	"syncthing"
	"bat"
	"build-essential"
	"iputils-ping"
	"netcat-openbsd"
)

PACK_DEV=(
	"valgrind"
	"python3"
	"python3-pip"
	"gdb"
)

#### PENTEST
PEN_WEB=(
	"nmap"
	"net-tools"
	"iperf3"
	"tcpdump"
	"iproute2"
	"wireshark"
)
PEN_REV=(
	"gdb"
)
PEN_STE=(
	"binwalk"
	"exiftool"
)
PEN_CRK=(
	"john"
	"hashcat"
	"hydra"
	"aircrack-ng"
)
PACK_PENTEST="${PEN_WEB[@]} ${PEN_REV[@]} ${PEN_STE[@]} ${PEN_CRK[@]}"

PACKAGES="${PACK_BASE[@]} ${PACK_DEV[@]} ${PACK_PENTEST[@]}"

# LINK PACKAGE
LINK_CHROME="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
LINK_VSCODE="https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
LINK_JAVA="https://download.oracle.com/java/20/latest/jdk-20_linux-x64_bin.deb"
LINK_BURP="https://portswigger-cdn.net/burp/releases/download?product=community&version=2023.4.2&type=Linux"
LINK_GEF="https://gef.blah.cat/py"
LINK_ARES="https://github.com/bee-san/Ares/releases/download/v0.10.0/project_ares-v0.10.0-x86_64-unknown-linux-gnu.tar.xz"
SECLISTS="https://github.com/danielmiessler/SecLists"

### htop config
PATH_HTOPRC_FILE_IN="${DIR_MODULE}/htop/htoprc"
PATH_HTOPRC_FILE_OUT="${HOME}/.config/htop/htoprc"

### git config
PATH_GITCONFIG_IN="${DIR_MODULE}/git/.gitconfig"
PATH_GITCONFIG_OUT="${HOME}/.gitconfig"

### i3 config

I3_PACKAGE_PAC=(
	"i3lock"
	"i3status"
	"rofi"
	"noto-fonts-emoji"
)

I3_PACKAGE_YAY=(
	"termite"
)
